addi sp, sp, 20
sw ra, 16(sp)


addi a0, x0, 0

lui t0, 15
srli t0, t0, 12
sw t0, 0(a0)

lui t0, 1022
srli t0, t0, 12
sw t0, 4(a0)

lui t0, 768
srli t0, t0, 12
sw t0, 8(a0)

lui t0, 230
srli t0, t0, 12
sw t0, 12(a0)

lui t0, 9281
srli t0, t0, 12
sw t0, 16(a0)

lui t0, 341
srli t0, t0, 12
sw t0, 20(a0)

lui t0, 203
srli t0, t0, 12
sw t0, 24(a0)

lui t0, 92849
srli t0, t0, 12
sw t0, 28(a0)

lui t0, 983
srli t0, t0, 12
sw t0, 32(a0)

lui t0, 140
srli t0, t0, 12
sw t0, 36(a0)

lui t0, 1233
srli t0, t0, 12
sw t0, 40(a0)

lui t0, 9271
srli t0, t0, 12
sw t0, 44(a0)

lui t0, 8412
srli t0, t0, 12
sw t0, 48(a0)

lui t0, 6736
srli t0, t0, 12
sw t0, 52(a0)

lui t0, 5629
srli t0, t0, 12
sw t0, 56(a0)

lui t0, 235
srli t0, t0, 12
sw t0, 60(a0)

lui t0, 635
srli t0, t0, 12
sw t0, 64(a0)

lui t0, 424
srli t0, t0, 12
sw t0, 68(a0)

lui t0, 8291
srli t0, t0, 12
sw t0, 72(a0)

lui t0, 3
srli t0, t0, 12
sw t0, 76(a0)





addi sp, sp, 2047
# Armazena valores de matriz na memória contígua no endereço de memória 0x0:
# { 10 , 80 , 30 , 90 , 40 , 50 , 70 }
 addi a0, x0, 0

 addi t0, x0, 10
 sw t0, 0(a0) 
 addi t0, x0, 80
 sw t0, 4(a0)
 addi t0, x0, 30
 sw t0, 8(a0)
 addi t0, x0, 90
 sw t0, 12(a0)
 addi t0, x0, 40
 sw t0, 16(a0)
 addi t0, x0, 50
 sw t0, 20(a0)
 addi t0, x0, 70
 sw t0, 24(a0)

addi a1, x0, 0 # start
addi a2, x0, 6 # end

jal ra, QUICKSORT
jal ra, EXIT

QUICKSORT:

#declaração de variaveis locais
addi sp, sp, -20
sw ra, 16(sp)  #-> guarda o valor de ra (endereço de retorno) na pilha
sw s3, 12(sp)  #-> guarda (reserva) o valor de s3 na pilha
sw s2, 8(sp)   #-> guarda (reserva) o valor de s2 na pilha
sw s1, 4(sp)   #-> guarda (reserva) o valor de s1 na pilha
sw s0, 0(sp)   #-> guarda (reserva) o valor de s0 na pilha

addi s0, a0, 0
addi s1, a1, 0
addi s2, a2, 0

BLT a2, a1, START_GT_END

jal ra, PARTITION

addi s3, a0, 0   # pi

addi a0, s0, 0
addi a1, s1, 0
addi a2, s3, -1
jal ra, QUICKSORT  # quicksort(arr, start, pi - 1);

addi a0, s0, 0
addi a1, s3, 1
addi a2, s2, 0
jal ra, QUICKSORT  # quicksort(arr, pi + 1, end);

START_GT_END:

lw s0, 0(sp)
lw s1, 4(sp)
lw s2, 8(sp)
lw s3, 12(sp)
lw ra, 16(sp)
addi sp, sp, 20
jalr x0, ra, 0

PARTITION:
addi sp, sp, -4
sw ra, 0(sp)

slli t0, a2, 2   # end * sizeof(int)
add t0, t0, a0  
lw t0, 0(t0)     # pivot = arr[end]
addi t1, a1, -1  # i = (start - 1)

addi t2, a1, 0   # j = start
LOOP:
BEQ t2, a2, LOOP_DONE   # while (j < end)

slli t3, t2, 2   # j * sizeof(int)
add a6, t3, a0   # (arr + j)
lw t3, 0(a6)     # arr[j]

addi t0, t0, 1   # pivot + 1
BLT t0, t3, CURR_ELEMENT_GTE_PIVOT  # if (pivot <= arr[j])
addi t1, t1, 1   # i++

slli t5, t1, 2   # i * sizeof(int)
add a7, t5, a0   # (arr + i)
lw t5, 0(a7)     # arr[i]

sw t5, 0(a6)
sw t3, 0(a7)     # swap(&arr[i], &arr[j])

CURR_ELEMENT_GTE_PIVOT:
addi t2, t2, 1   # j++
beq x0, x0, LOOP
LOOP_DONE:

addi t5, t1, 1   # i + 1
addi a5, t5, 0   # Save for return value.
slli t5, t5, 2   # (i + 1) * sizeof(int)
add a7, t5, a0   # (arr + (i + 1))
lw t5, 0(a7)     # arr[i + 1]

slli t3, a2, 2   # end * sizeof(int)
add a6, t3, a0   # (arr + end)
lw t3, 0(a6)     # arr[end]

sw t5, 0(a6)
sw t3, 0(a7)     # swap(&arr[i + 1], &arr[end])

addi a0, a5, 0   # return i + 1

lw ra, 0(sp)
addi sp, sp, 4
jalr x0, ra, 0

EXIT:
